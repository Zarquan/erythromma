#
# <meta:header>
#   <meta:licence>
#     Copyright (C) 2019 by Wizzard Solutions Ltd, ischnura@metagrid.co.uk
#
#     This information is free software: you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation, either version 3 of the License, or
#     (at your option) any later version.
#
#     This information is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
#
#     You should have received a copy of the GNU General Public License
#     along with this program.  If not, see <http://www.gnu.org/licenses/>.
#   </meta:licence>
# </meta:header>
#
#

#----------------------------------------------------------------
# Download our firmware image.
# http://docs.micropython.org/en/latest/esp8266/esp8266/tutorial/intro.html
#[user@desktop]

    pushd /tmp

        wget http://micropython.org/resources/firmware/esp8266-20190529-v1.11.bin

    popd

    >   --2019-07-29 01:36:36--  http://micropython.org/resources/firmware/esp8266-20190529-v1.11.bin
    >   Resolving micropython.org (micropython.org)... 176.58.119.26
    >   Connecting to micropython.org (micropython.org)|176.58.119.26|:80... connected.
    >   HTTP request sent, awaiting response... 200 OK
    >   Length: 617880 (603K) [application/octet-stream]
    >   Saving to: ‘esp8266-20190529-v1.11.bin’
    >   
    >   esp8266-20190529-v1.11.bin      100%[====== .... =======>] 603.40K  1.73MB/s in 0.3s
    >   
    >   2019-07-29 01:36:36 (1.73 MB/s) - ‘esp8266-20190529-v1.11.bin’ saved [617880/617880]


#----------------------------------------------------------------
# Fix USB device permissions.
#[user@desktop]

    sudo chmod a+rw /dev/ttyUSB0


#----------------------------------------------------------------
# Erase the existing flash contents
#[user@desktop]

    esptool.py \
        --port /dev/ttyUSB0 \
        erase_flash

    >   esptool.py v2.7
    >   Serial port /dev/ttyUSB0
    >   Connecting....
    >   Detecting chip type... ESP8266
    >   Chip is ESP8266EX
    >   Features: WiFi
    >   Crystal is 26MHz
    >   MAC: b4:e6:2d:23:c7:5d
    >   Uploading stub...
    >   Running stub...
    >   Stub running...
    >   Erasing flash (this may take a while)...
    >   Chip erase completed successfully in 8.8s
    >   Hard resetting via RTS pin...


#----------------------------------------------------------------
# Install the MicroPython firmware
# http://docs.micropython.org/en/latest/esp8266/esp8266/tutorial/intro.html
#[user@desktop]

    esptool.py \
        --port /dev/ttyUSB0 \
        write_flash \
        0x00000 \
        /tmp/esp8266-20190529-v1.11.bin

    >   esptool.py v2.7
    >   Serial port /dev/ttyUSB0
    >   Connecting....
    >   Detecting chip type... ESP8266
    >   Chip is ESP8266EX
    >   Features: WiFi
    >   Crystal is 26MHz
    >   MAC: b4:e6:2d:23:c7:5d
    >   Uploading stub...
    >   Running stub...
    >   Stub running...
    >   Configuring flash size...
    >   Auto-detected Flash size: 4MB
    >   Flash params set to 0x0040
    >   Compressed 600888 bytes to 392073...
    >   Wrote 600888 bytes (392073 compressed) at 0x00000000 in 34.6 seconds (effective 138.8 kbit/s)...
    >   Hash of data verified.
    >   
    >   Leaving...
    >   Hard resetting via RTS pin...


#----------------------------------------------------------------
# Test the Python REPL prompt
# http://docs.micropython.org/en/latest/esp8266/esp8266/tutorial/repl.html
#[user@desktop]

    minicom \
        --device /dev/ttyUSB0

    >   Welcome to minicom 2.7.1
    >   
    >   OPTIONS: I18n
    >   Compiled on Aug 13 2018, 16:36:08.
    >   Port /dev/ttyUSB0, 01:19:04
    >   
    >   Press CTRL-A Z for help on special keys


#----------------------------------------------------------------
# Connect to our Wifi
# https://docs.micropython.org/en/latest/esp8266/quickref.html#networking
#[user@esp8266]

import time
import network

wifissid='metagrid.co.uk'
wifipass='##############'

wlan = network.WLAN(network.STA_IF) # create station interface
wlan.active(True)       # activate the interface
wlan.scan()             # scan for access points

    >   [(b'TALKTALK7B8A92', b'\xd8}\x7f{\x8a\x8f', 1, -93, 3, 0), (b'TALKTALKFBCE5E', b'\xa4qt\xfb\xced', 1, -90, 4, 0), (b'TALKTALK4D6EBA', b'\xd8\xa7VMn\xb7', 11, -84, 3, 0), (b'metagrid.co.uk', b'\xe0v\xd0\x03P\xb5', 13, -53, 3, 0)]
    >   >>> wlan.isconnected()      # check if the station is connected to an AP
    >   --END-
    >   
    >   wlan.isconnected()      # check if the station is connected to an AP
    >   
    >   False
    >   --END-
    >   
    >   wlan.connect(wifissid, wifipass) # connect to an AP
    >   time.sleep_ms(5000)
    >   
    >   wlan.isconnected()      # check if the station is connected to an AP
    >   
    >   True
    >   --END-
    >   
    >   wlan.config('mac')      # get the interface's MAC adddress
    >   
    >   b'\xb4\xe6-#\xc7]'
    >   --END-
    >   
    >   wlan.ifconfig()         # get the interface's IP/netmask/gw/DNS addresses
    >   
    >   ('10.6.0.69', '255.255.0.0', '10.6.0.1', '10.6.0.1')
    >   --END-
    >   
    >   
    >   #----------------------------------------------------------------
    >   # Run the webrepl setup program
    >   # https://docs.micropython.org/en/latest/esp8266/tutorial/repl.html
    >   #[user@esp8266]
    >   
    >   import webrepl_setup
    >   
    >   WebREPL daemon auto-start status: disabled
    >   
    >   Would you like to (E)nable or (D)isable it running on boot?
    >   (Empty line to quit)
    >   > E
    >   To enable WebREPL, you must set password for it
    >   New password (4-9 chars): ########
    >   Confirm password: ########
    >   Changes will be activated after reboot
    >   Would you like to reboot now? (y/n) n


    >   MPY: soft reboot
    >   WebREPL daemon started on ws://192.168.4.1:8266
    >   WebREPL daemon started on ws://10.6.0.69:8266
    >   Started webrepl in normal mode
    >   MicroPython v1.11-8-g48dcbbe60 on 2019-05-29; ESP module with ESP8266
    >   Type "help()" for more information.

    >   WebREPL connection from: ('10.6.0.88', 34600)


#----------------------------------------------------------------
# List the local files.
#[user@esp8266]

import os
os.listdir()

    >   ['boot.py', 'webrepl_cfg.py']

#----------------------------------------------------------------
# List the webrepl config file.
#[user@esp8266]

with open('webrepl_cfg.py') as file:
  for line in file:
    print(line)

    >   PASS = '########'


#----------------------------------------------------------------
# List the MicroPy boot file.
#[user@esp8266]

with open('boot.py') as file:
  for line in file:
    print(line)

    >   # This file is executed on every boot (including wake-boot from deepsleep)
    >   #import esp
    >   #esp.osdebug(None)
    >   import uos, machine
    >   #uos.dupterm(None, 1) # disable REPL on UART(0)
    >   import gc
    >   import webrepl
    >   webrepl.start()
    >   gc.collect()


#----------------------------------------------------------------
# Check the Wifi access-point interface.
#[user@esp8266]

import network

ap_if = network.WLAN(network.AP_IF)

ap_if.active()
    >   True

ap_if.ifconfig()
    >   ('192.168.4.1', '255.255.255.0', '192.168.4.1', '10.6.0.1')


#----------------------------------------------------------------
# Check the Wifi station interface.
#[user@esp8266]

import network

sta_if = network.WLAN(network.STA_IF)

sta_if.active()
    >   True

sta_if.ifconfig()
    >   ('10.6.0.69', '255.255.0.0', '10.6.0.1', '10.6.0.1')


#----------------------------------------------------------------
# Disable the Wifi access-point interface.
#[user@esp8266]

network.WLAN(network.AP_IF).active(False)


