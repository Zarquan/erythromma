#
# <meta:header>
#   <meta:licence>
#     Copyright (C) 2018 by Wizzard Solutions Ltd, ischnura@metagrid.co.uk
#
#     This information is free software: you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation, either version 3 of the License, or
#     (at your option) any later version.
#
#     This information is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
#
#     You should have received a copy of the GNU General Public License
#     along with this program.  If not, see <http://www.gnu.org/licenses/>.
#   </meta:licence>
# </meta:header>
#
#


https://www.kickstarter.com/projects/214379695/micropython-on-the-esp8266-beautifully-easy-iot/description



#----------------------------------------------------------------
# Download our firmware image.
# http://docs.micropython.org/en/latest/esp8266/esp8266/tutorial/intro.html
#[user@desktop]

    pushd /tmp

        wget http://micropython.org/resources/firmware/esp8266-20171101-v1.9.3.bin

    popd

    >   --2019-07-28 16:13:48--  http://micropython.org/resources/firmware/esp8266-20171101-v1.9.3.bin
    >   Resolving micropython.org (micropython.org)... 176.58.119.26
    >   Connecting to micropython.org (micropython.org)|176.58.119.26|:80... connected.
    >   HTTP request sent, awaiting response... 200 OK
    >   Length: 600888 (587K) [application/octet-stream]
    >   Saving to: ‘esp8266-20171101-v1.9.3.bin’
    >   
    >   esp8266-20171101-v1.9.3.bin     100%[====....====>] 586.80K  1.74MB/s in 0.3s
    >   
    >   2019-07-28 16:13:48 (1.74 MB/s) - ‘esp8266-20171101-v1.9.3.bin’ saved [600888/600888]


#----------------------------------------------------------------
# Check device permissions.
#[user@desktop]

    ls -al /dev/ttyUSB0

    >   crw-rw----. 1 root dialout 188, 0 Jul 28 16:02 /dev/ttyUSB0

    sudo chmod a+rw /dev/ttyUSB0

    ls -al /dev/ttyUSB0

    >   crw-rw-rw-. 1 root dialout 188, 0 Jul 28 16:02 /dev/ttyUSB0


#----------------------------------------------------------------
# Install the esptool bootloader utility.
# http://nodemcu.readthedocs.io/en/master/en/flash/
# https://github.com/espressif/esptool
#[user@desktop]

    sudo pip install esptool

    >   Collecting esptool
    >     Downloading https://files.pythonhosted.org/packages/6c/bf/578443af2270ebeff78fdfd30cef3a02433cc63b34a912936653a48526dd/esptool-2.7.tar.gz (83kB)
    >       100% |████████████████████████████████| 92kB 1.7MB/s
    >   Collecting pyserial>=3.0 (from esptool)
    >     Downloading https://files.pythonhosted.org/packages/0d/e4/2a744dd9e3be04a0c0907414e2a01a7c88bb3915cbe3c8cc06e209f59c30/pyserial-3.4-py2.py3-none-any.whl (193kB)
    >       100% |████████████████████████████████| 194kB 1.8MB/s
    >   Collecting pyaes (from esptool)
    >     Downloading https://files.pythonhosted.org/packages/44/66/2c17bae31c906613795711fc78045c285048168919ace2220daa372c7d72/pyaes-1.6.1.tar.gz
    >   Collecting ecdsa (from esptool)
    >     Downloading https://files.pythonhosted.org/packages/23/a8/8aa68e70959e1287da9154e5164bb8bd5dd7025e41ae54e8d177b8d165c9/ecdsa-0.13.2-py2.py3-none-any.whl (59kB)
    >       100% |████████████████████████████████| 61kB 2.4MB/s
    >   Installing collected packages: pyserial, pyaes, ecdsa, esptool
    >     Running setup.py install for pyaes ... done
    >     Running setup.py install for esptool ... done
    >   Successfully installed ecdsa-0.13.2 esptool-2.7 pyaes-1.6.1 pyserial-3.4


    esptool.py -h

    >   usage: esptool [-h] [--chip {auto,esp8266,esp32}] [--port PORT] [--baud BAUD]
    >                  [--before {default_reset,no_reset,no_reset_no_sync}]
    >                  [--after {hard_reset,soft_reset,no_reset}] [--no-stub]
    >                  [--trace] [--override-vddsdio [{1.8V,1.9V,OFF}]]
    >                  {load_ram,dump_mem,read_mem,write_mem,write_flash,run,image_info,make_image,elf2image,read_mac,chip_id,flash_id,read_flash_status,write_flash_status,read_flash,verify_flash,erase_flash,erase_region,version}
    >                  ...

#----------------------------------------------------------------
# Erase the existing flash contents
#[user@desktop]

    esptool.py \
        --port /dev/ttyUSB0 \
        read_flash_status

    >   esptool.py v2.7
    >   Serial port /dev/ttyUSB0
    >   Connecting....
    >   Detecting chip type... ESP8266
    >   Chip is ESP8266EX
    >   Features: WiFi
    >   Crystal is 26MHz
    >   MAC: b4:e6:2d:23:c7:5d
    >   Uploading stub...
    >   Running stub...
    >   Stub running...
    >   Status value: 0x0000
    >   Hard resetting via RTS pin...


    esptool.py \
        --port /dev/ttyUSB0 \
        flash_id

    >   esptool.py v2.7
    >   Serial port /dev/ttyUSB0
    >   Connecting....
    >   Detecting chip type... ESP8266
    >   Chip is ESP8266EX
    >   Features: WiFi
    >   Crystal is 26MHz
    >   MAC: b4:e6:2d:23:c7:5d
    >   Uploading stub...
    >   Running stub...
    >   Stub running...
    >   Manufacturer: c2
    >   Device: 2516
    >   Detected flash size: 4MB
    >   Hard resetting via RTS pin...


    esptool.py \
        --port /dev/ttyUSB0 \
        erase_flash

    >   esptool.py v2.7
    >   Serial port /dev/ttyUSB0
    >   Connecting....
    >   Detecting chip type... ESP8266
    >   Chip is ESP8266EX
    >   Features: WiFi
    >   Crystal is 26MHz
    >   MAC: b4:e6:2d:23:c7:5d
    >   Uploading stub...
    >   Running stub...
    >   Stub running...
    >   Erasing flash (this may take a while)...
    >   Chip erase completed successfully in 8.9s
    >   Hard resetting via RTS pin...


#----------------------------------------------------------------
# Install the MicroPython firmware
# http://docs.micropython.org/en/latest/esp8266/esp8266/tutorial/intro.html
#[user@desktop]

    esptool.py \
        --port /dev/ttyUSB0 \
        write_flash \
        0x00000 \
        /tmp/esp8266-20171101-v1.9.3.bin

    >   esptool.py v2.7
    >   Serial port /dev/ttyUSB0
    >   Connecting....
    >   Detecting chip type... ESP8266
    >   Chip is ESP8266EX
    >   Features: WiFi
    >   Crystal is 26MHz
    >   MAC: b4:e6:2d:23:c7:5d
    >   Uploading stub...
    >   Running stub...
    >   Stub running...
    >   Configuring flash size...
    >   Auto-detected Flash size: 4MB
    >   Flash params set to 0x0040
    >   Compressed 600888 bytes to 392073...
    >   Wrote 600888 bytes (392073 compressed) at 0x00000000 in 34.6 seconds (effective 138.9 kbit/s)...
    >   Hash of data verified.
    >   
    >   Leaving...
    >   Hard resetting via RTS pin...


#----------------------------------------------------------------
# Test the Python REPL prompt
# http://docs.micropython.org/en/latest/esp8266/esp8266/tutorial/repl.html
#[user@desktop]

    minicom \
        --device /dev/ttyUSB0

        Welcome to minicom 2.7.1

        OPTIONS: I18n
        Compiled on Aug 13 2018, 16:36:08.
        Port /dev/ttyUSB0, 16:15:44

        Press CTRL-A Z for help on special keys


        >>>
        >>> print('hello esp8266!')
        hello esp8266!
        >>>

#----------------------------------------------------------------
# Test the GPIO pins
# https://dziadalnfpolx.cloudfront.net/blog/wp-content/uploads/2015/09/esp8266-nodemcu-dev-kit-v3-pins.jpg
#[user@esp8266]

import machine
pin = machine.Pin(16, machine.Pin.OUT)
pin.on()
pin.off()

def toggle(p):
  p.value(not p.value())

toggle(pin)
toggle(pin)

import time
while True:
  toggle(pin)
  time.sleep_ms(5000)


#----------------------------------------------------------------
# Test the filesystem
# http://docs.micropython.org/en/latest/esp8266/esp8266/tutorial/filesystem.html
#[user@esp8266]

import os
os.listdir()

    ['boot.py']


#----------------------------------------------------------------
# Test the wifi network
# http://docs.micropython.org/en/latest/esp8266/esp8266/tutorial/network_basics.html
#[user@esp8266]

import network
st_if = network.WLAN(network.STA_IF)
ap_if = network.WLAN(network.AP_IF)

st_if.active()
False

ap_if.active()
True


#----------------------------------------------------------------
# Connect to our wifi network
# http://docs.micropython.org/en/latest/esp8266/esp8266/tutorial/network_basics.html
#[user@esp8266]

ap_if.active(False)

st_if.active(True)
#6 ets_task(4020ed88, 28, 3fff8d90, 10)

st_if.connect('ssid', 'password')
st_if.isconnected()
True

st_if.ifconfig()
('10.6.0.69', '255.255.0.0', '10.6.0.1', '10.6.0.1')


#----------------------------------------------------------------
# Test the wifi network
# http://docs.micropython.org/en/latest/esp8266/esp8266/tutorial/network_tcp.html
#[user@esp8266]

import socket
socket.getaddrinfo('data.metagrid.co.uk', 23)

[(2, 1, 0, '', ('178.79.157.93', 23))]

info = socket.getaddrinfo("towel.blinkenlights.nl", 23)
addr = info[0][-1]

s = socket.socket()
s.connect(addr)

while True:
  data = s.recv(500)
  print(str(data, 'utf8'), end='')


#----------------------------------------------------------------
# Test the I2C interface (D1,D2)
# http://docs.micropython.org/en/latest/esp8266/library/machine.I2C.html
# https://www.esp8266.com/viewtopic.php?f=13&t=10374
#[user@esp8266]

import machine
machine.reset()

MicroPython v1.9.3-8-g63826ac5c on 2017-11-01; ESP module with ESP8266
Type "help()" for more information.

from machine import Pin
from machine import I2C

scl = Pin(5) # D1 -> p14
sda = Pin(4) # D2 -> p15

myi2c = I2C(-1, scl, sda, freq=10000)
myi2c.scan()
[]


#----------------------------------------------------------------
# Test the I2C interface (D6,D7)
# https://github.com/micropython/micropython/issues/3555
#[user@esp8266]

import machine
machine.reset()

from machine import Pin
from machine import I2C

scl = Pin(12) # D6 -> p14
sda = Pin(13) # D7 -> p15

myi2c = I2C(-1, scl, sda, freq=10000)
myi2c.scan()
[56]

myi2c.writeto(56, bytes((0,)))
1

myi2c.writeto(56, bytes((255,)))
1

myi2c.readfrom(56,1)
b'\xff'

#
# Works for both input and output.
#

value = 0
while True:
  value  = value ^ 255
  result = myi2c.writeto(56, bytes((value,)))
  time.sleep_ms(5000)



#----------------------------------------------------------------
# Exit Minicom
#[user@esp8266]

    Ctrl-A X


#----------------------------------------------------------------
# Test the rshell interface
# https://cdn-learn.adafruit.com/downloads/pdf/micropython-basics-load-files-and-run-code.pdf
# https://github.com/dhylands/rshell
# https://forum.micropython.org/viewtopic.php?t=708&start=20#p19715
#[user@desktop]

    sudo pip3 install rshell

    >   Collecting rshell
    >     Downloading https://files.pythonhosted.org/packages/11/e6/1cf4129a4d49eb4ea5007d9f292fa22a8ba9d2b533c179b9df9ae3d51dd2/rshell-0.0.26.tar.gz (44kB)
    >       100% |████████████████████████████████| 51kB 1.7MB/s
    >   Collecting pyserial (from rshell)
    >     Using cached https://files.pythonhosted.org/packages/0d/e4/2a744dd9e3be04a0c0907414e2a01a7c88bb3915cbe3c8cc06e209f59c30/pyserial-3.4-py2.py3-none-any.whl
    >   Requirement already satisfied: pyudev>=0.16 in /usr/lib/python3.7/site-packages (from rshell) (0.21.0)
    >   Requirement already satisfied: six in /usr/lib/python3.7/site-packages (from pyudev>=0.16->rshell) (1.11.0)
    >   Installing collected packages: pyserial, rshell
    >     Running setup.py install for rshell ... done
    >   Successfully installed pyserial-3.4 rshell-0.0.26

    rshell \
        --buffer-size 32 \
        --port /dev/ttyUSB0

    >   Using buffer-size of 32
    >   Connecting to /dev/ttyUSB0 (buffer-size 32)...
    >   Trying to connect to REPL  connected
    >   Testing if ubinascii.unhexlify exists ... Y
    >   Retrieving root directories ... /boot.py/
    >   Setting time ... Jul 28, 2019 16:49:43
    >   Evaluating board_name ... pyboard
    >   Retrieving time epoch ... Jan 01, 2000
    >   Welcome to rshell. Use Control-D (or the exit command) to exit rshell.
    >   --END
    >   
    >   
    >   #----------------------------------------------------------------
    >   #[user@esp8266]
    >   
    >           boards
    >   
    >   pyboard @ /dev/ttyUSB0 connected Epoch: 2000 Dirs: /boot.py /pyboard/boot.py
    >   --END
    >   
    >           ls /pyboard/
    >   
    >   boot.py
    >   --END
    >   
    >   
    >           ls /pyboard/boot.py
    >   
    >   /pyboard/boot.py


        cat /pyboard/boot.py

    >   # This file is executed on every boot (including wake-boot from deepsleep)
    >   #import esp
    >   #esp.osdebug(None)
    >   import gc
    >   #import webrepl
    >   #webrepl.start()
    >   gc.collect()

        cp /pyboard/boot.py boot.py


#----------------------------------------------------------------
#----------------------------------------------------------------
# Edit the boot file on desktop
#[user@desktop]

    gedit ~/boot.py

    >   # This file is executed on every boot (including wake-boot from deepsleep)
    >   #import esp
    >   #esp.osdebug(None)
    >   import gc
    >   #import webrepl
    >   #webrepl.start()
    >   gc.collect()
    >   
    >   import time
    >   import machine
    >   
    >   from machine import Pin
    >   from machine import I2C
    >   
    >   scl = Pin(12) # D6 -> p14
    >   sda = Pin(13) # D7 -> p15
    >   
    >   myi2c = I2C(-1, scl, sda, freq=10000)
    >   myi2c.scan()
    >   
    >   value = 0
    >   while True:
    >     value  = value ^ 255
    >     result = myi2c.writeto(56, bytes((value,)))
    >     time.sleep_ms(5000)


#----------------------------------------------------------------
#----------------------------------------------------------------
#[user@esp8266]

        cp boot.py /pyboard
        cat /pyboard/boot.py

    >   # This file is executed on every boot (including wake-boot from deepsleep)
    >   #import esp
    >   #esp.osdebug(None)
    >   import gc
    >   #import webrepl
    >   #webrepl.start()
    >   gc.collect()
    >   
    >   import network
    >   ap_if = network.WLAN(network.AP_IF)
    >   ap_if.active(False)
    >   
    >   st_if = network.WLAN(network.STA_IF)
    >   st_if.active(True)
    >   st_if.connect('metagrid.co.uk', 'KelticBlueBear::YuanRedCoat')





